(()=>{"use strict";var t,e=new Uint8Array(16);function n(){if(!t&&!(t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return t(e)}const a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,o=function(t){return"string"==typeof t&&a.test(t)};for(var r=[],i=0;i<256;++i)r.push((i+256).toString(16).substr(1));const d=function(t,e,a){var i=(t=t||{}).random||(t.rng||n)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,e){a=a||0;for(var d=0;d<16;++d)e[a+d]=i[d];return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(r[t[e+0]]+r[t[e+1]]+r[t[e+2]]+r[t[e+3]]+"-"+r[t[e+4]]+r[t[e+5]]+"-"+r[t[e+6]]+r[t[e+7]]+"-"+r[t[e+8]]+r[t[e+9]]+"-"+r[t[e+10]]+r[t[e+11]]+r[t[e+12]]+r[t[e+13]]+r[t[e+14]]+r[t[e+15]]).toLowerCase();if(!o(n))throw TypeError("Stringified UUID is invalid");return n}(i)};function s(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function l(t){s(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function c(t,e){s(2,arguments);var n=l(t),a=l(e),o=n.getTime()-a.getTime();return o<0?-1:o>0?1:o}function u(t,e){s(2,arguments);var n=l(t),a=l(e),o=n.getFullYear()-a.getFullYear(),r=n.getMonth()-a.getMonth();return 12*o+r}function m(t,e){s(2,arguments);var n=l(t),a=l(e),o=c(n,a),r=Math.abs(u(n,a));n.setMonth(n.getMonth()-o*r);var i=c(n,a)===-o,d=o*(r-i);return 0===d?0:d}function f(t,e){s(2,arguments);var n=l(t),a=l(e);return n.getTime()-a.getTime()}function h(t,e){s(2,arguments);var n=f(t,e)/1e3;return n>0?Math.floor(n):Math.ceil(n)}var p={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function v(t){return function(e){var n=e||{},a=n.width?String(n.width):t.defaultWidth;return t.formats[a]||t.formats[t.defaultWidth]}}var b,g={date:v({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:v({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:v({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function k(t){return function(e,n){var a,o=n||{};if("formatting"===(o.context?String(o.context):"standalone")&&t.formattingValues){var r=t.defaultFormattingWidth||t.defaultWidth,i=o.width?String(o.width):r;a=t.formattingValues[i]||t.formattingValues[r]}else{var d=t.defaultWidth,s=o.width?String(o.width):t.defaultWidth;a=t.values[s]||t.values[d]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function w(t){return function(e,n){var a=String(e),o=n||{},r=o.width,i=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],d=a.match(i);if(!d)return null;var s,l=d[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth];return s="[object Array]"===Object.prototype.toString.call(c)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(l))return n}(c):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(l))return n}(c),s=t.valueCallback?t.valueCallback(s):s,{value:s=o.valueCallback?o.valueCallback(s):s,rest:a.slice(l.length)}}}const E={code:"en-US",formatDistance:function(t,e,n){var a;return n=n||{},a="string"==typeof p[t]?p[t]:1===e?p[t].one:p[t].other.replace("{{count}}",e),n.addSuffix?n.comparison>0?"in "+a:a+" ago":a},formatLong:g,formatRelative:function(t,e,n,a){return y[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:k({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:k({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return Number(t)-1}}),month:k({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:k({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:k({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(b={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t,e){var n=String(t),a=e||{},o=n.match(b.matchPattern);if(!o)return null;var r=o[0],i=n.match(b.parsePattern);if(!i)return null;var d=b.valueCallback?b.valueCallback(i[0]):i[0];return{value:d=a.valueCallback?a.valueCallback(d):d,rest:n.slice(r.length)}}),era:w({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:w({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:w({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:w({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:w({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function j(t){return function(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in e=e||{})e.hasOwnProperty(n)&&(t[n]=e[n]);return t}({},t)}var M=6e4;function S(t){return t.getTime()%M}function x(t){var e=new Date(t.getTime()),n=Math.ceil(e.getTimezoneOffset());e.setSeconds(0,0);var a=n>0?(M+S(e))%M:S(e);return n*M+a}var D=1440,I=43200;const T=(()=>{const t=document.getElementById("tasks");return{create:(t,e,n,a,o,r)=>{const i=((t,e,n,a)=>({id:d(),title:t,description:e,dueDate:n,prio:a,completed:!1}))(n,a,o,parseInt(r));t.forEach((t=>{t.title===e&&t.tasks.push(i)}))},render:(e,n)=>{const a=e.filter((t=>t.title===n))[0];t.innerHTML="";const o=document.createElement("div");o.classList.add("d-flex","justify-content-between","flex-wrap","flex-md-nowrap","align-items-center","py-3","mb-3","border-bottom");const r=document.createElement("h2");r.classList.add("h2","text-capitalize"),r.textContent=a.title;const i=document.createElement("button");i.classList.add("edit-project","btn","btn-sm","btn-outline-secondary"),i.setAttribute("href","#"),i.dataset.project=a.title;const d=document.createElement("i");d.classList.add("fas","fa-pen"),i.appendChild(d),o.appendChild(r),"inbox"!==n&&o.appendChild(i),t.appendChild(o);const u=document.createElement("ul");u.classList.add("nav"),a.tasks.map((t=>{u.innerHTML+=((t,e)=>{let n;switch(t.prio){case 1:n="❗️❗️❗️";break;case 2:n="❗️❗";break;case 3:n="❗️";break;default:n=""}return`\n      <li class="w-100 mb-1">\n        <div class="d-flex justify-content-between">\n          <div class="d-flex">\n            <button\n              id="${t.id}"\n              type="button"\n              role="checkbox"\n              class="btn btn-sm btn-task js-complete"\n              data-project="${e}"\n            >\n              <div class="task-circle${t.completed?" task-circle--checked":""}" data-project="${e}">\n                <svg width="24" height="24">\n                  <path\n                    fill="currentColor"\n                    d="M11.23 13.7l-2.15-2a.55.55 0 0 0-.74-.01l.03-.03a.46.46 0 0 0 0 .68L11.24 15l5.4-5.01a.45.45 0 0 0 0-.68l.02.03a.55.55 0 0 0-.73 0l-4.7 4.35z"\n                  ></path>\n                </svg>\n              </div>\n            </button>\n            <div role="button" class="js-task-review" data-taskID="${t.id}" data-project="${e}">\n              <p class="mb-0${t.completed?" text-linethrough":""}">${n} ${t.title}</p>\n            </div>\n          </div>\n          <p class="mb-0${t.completed?" d-none":""}">due ${function(t,e,n){s(2,arguments);var a=n||{},o=a.locale||E;if(!o.formatDistance)throw new RangeError("locale must contain formatDistance property");var r=c(t,e);if(isNaN(r))throw new RangeError("Invalid time value");var i,d,u=j(a);u.addSuffix=Boolean(a.addSuffix),u.comparison=r,r>0?(i=l(e),d=l(t)):(i=l(t),d=l(e));var f,p=h(d,i),v=(x(d)-x(i))/1e3,b=Math.round((p-v)/60);if(b<2)return a.includeSeconds?p<5?o.formatDistance("lessThanXSeconds",5,u):p<10?o.formatDistance("lessThanXSeconds",10,u):p<20?o.formatDistance("lessThanXSeconds",20,u):p<40?o.formatDistance("halfAMinute",null,u):p<60?o.formatDistance("lessThanXMinutes",1,u):o.formatDistance("xMinutes",1,u):0===b?o.formatDistance("lessThanXMinutes",1,u):o.formatDistance("xMinutes",b,u);if(b<45)return o.formatDistance("xMinutes",b,u);if(b<90)return o.formatDistance("aboutXHours",1,u);if(b<D){var g=Math.round(b/60);return o.formatDistance("aboutXHours",g,u)}if(b<2520)return o.formatDistance("xDays",1,u);if(b<I){var y=Math.round(b/D);return o.formatDistance("xDays",y,u)}if(b<86400)return f=Math.round(b/I),o.formatDistance("aboutXMonths",f,u);if((f=m(d,i))<12){var k=Math.round(b/I);return o.formatDistance("xMonths",k,u)}var w=f%12,M=Math.floor(f/12);return w<3?o.formatDistance("aboutXYears",M,u):w<9?o.formatDistance("overXYears",M,u):o.formatDistance("almostXYears",M+1,u)}(new Date(t.dueDate),new Date,{addSuffix:!0})}</p>\n        </div>\n      </li>\n    `})(t,a.title)})),t.appendChild(u)},complete:(t,e)=>{let n;e.forEach((e=>{e.title===t.target.dataset.project&&(n=e.tasks.findIndex((e=>e.id===t.target.id)),e.tasks[n].completed=!e.tasks[n].completed)})),localStorage.setItem("data",JSON.stringify(e)),t.target.parentNode.childNodes[3].firstElementChild.classList.toggle("text-linethrough"),t.target.childNodes[1].classList.toggle("task-circle--checked")},container:t}})(),B=(()=>{const t=document.getElementById("projects");return{render:e=>{t.innerHTML="",e.map(((e,n)=>{((e,n,a)=>{const o=document.createElement("li"),r=document.createElement("a");r.classList.add("nav-link","text-capitalize"),0===a&&r.classList.add("active"),r.setAttribute("href","#"),r.dataset.project=e,r.textContent=e;const i=document.createElement("span");i.classList.add("text-black-50"),i.textContent=` ${n}`,r.appendChild(i),o.appendChild(r),t.appendChild(o)})(e.title,e.tasks.length,n)}))},create:(t,e)=>{t.includes((t=>t.title===e))||t.push((t=>({id:d(),title:t,tasks:[]}))(e)),localStorage.setItem("data",JSON.stringify(t))},generateSelection:(t,e)=>t.map((t=>{const n=document.createElement("option");return n.setAttribute("value",t.title),e===t.title&&n.setAttribute("selected",!0),n.textContent=t.title,n})),activate:e=>{document.querySelectorAll(".nav-link").forEach((t=>t.classList.remove("active"))),t.querySelectorAll(".nav-link").forEach((t=>{t.dataset.project===e&&t.classList.contains("nav-link")&&t.classList.add("active")}))},form:document.getElementById("add-project")}})(),L=(()=>{const t=document.getElementById("modals");let e;return{renderEditProject:n=>{const a=`\n          <div\n          class="modal fade"\n          id="todo-modal"\n          tabindex="-1"\n          aria-labelledby="staticBackdropLabel"\n          aria-hidden="true"\n          >\n            <div class="modal-dialog modal-dialog-centered">\n              <div class="modal-content">\n                <div class="modal-header">\n                  <h5 class="modal-title" id="staticBackdropLabel">Edit a Project</h5>\n                  <button\n                    type="button"\n                    class="btn-close"\n                    aria-label="Close"\n                  ></button>\n                </div>\n                <form id="edit-project-form">\n                  <div class="modal-body">\n                    <div>\n                      <label for="title" class="form-label">Title: </label>\n                      <input\n                        class="form-control"\n                        type="text"\n                        name="title"\n                        id="project-title-edit"\n                        value=${n.target.dataset.project}\n                        required\n                      />\n                    </div>\n                  </div>\n                  <div class="modal-footer">\n                    <button id="remove-project" class="btn btn-outline-danger">\n                      Remove\n                    </button>\n                    <button class="btn btn-primary" type="submit">\n                      Save\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        `;t.innerHTML+=a,e=new bootstrap.Modal(document.getElementById("todo-modal")),e.show()},renderAddProject:()=>{t.innerHTML+='\n      <div\n      class="modal fade"\n      id="todo-modal"\n      tabindex="-1"\n      aria-labelledby="staticBackdropLabel"\n      aria-hidden="true"\n      >\n        <div class="modal-dialog modal-dialog-centered">\n          <div class="modal-content">\n            <div class="modal-header">\n              <h5 class="modal-title" id="staticBackdropLabel">Add a Project</h5>\n              <button\n                type="button"\n                class="btn-close"\n                aria-label="Close"\n              ></button>\n            </div>\n            <form id="add-project">\n              <div class="modal-body">\n                <div>\n                  <label for="title" class="form-label">Title: </label>\n                  <input\n                    class="form-control"\n                    type="text"\n                    name="title"\n                    id="project-title"\n                    required\n                  />\n                </div>\n              </div>\n              <div class="modal-footer">\n                <button class="btn btn-primary" type="submit">Add</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    ',e=new bootstrap.Modal(document.getElementById("todo-modal")),e.show()},hide:()=>{e.hide(),setTimeout((()=>{t.innerHTML=""}),500)},renderEditTask:(n,a)=>{let o,r;a.forEach((t=>{if(t.title===n.dataset.project){o=t.tasks.findIndex((t=>t.id===n.dataset.taskid));const e=t.tasks[o];r=`\n          <div\n          class="modal fade"\n          id="todo-modal"\n          tabindex="-1"\n          aria-labelledby="staticBackdropLabel"\n          aria-hidden="true"\n          >\n            <div class="modal-dialog modal-dialog-centered">\n              <div class="modal-content">\n                <div class="modal-header">\n                  <h5 class="modal-title" id="staticBackdropLabel">Edit a Task</h5>\n                  <button\n                    type="button"\n                    class="btn-close"\n                    aria-label="Close"\n                  ></button>\n                </div>\n                <form id="edit-task-form" data-task="${e.id}">\n                  <div class="modal-body">\n                    <div class="mb-3">\n                      <label for="project" class="form-label">Project:</label>\n                      <select\n                        id="task-project"\n                        class="form-select text-capitalize"\n                        name="project"\n                      ></select>\n                    </div>\n                    <div class="mb-3">\n                      <label for="title" class="form-label">Title: </label>\n                      <input\n                        id="task-title"\n                        class="form-control"\n                        type="text"\n                        name="title"\n                        required\n                        value="${e.title}"\n                      />\n                    </div>\n                    <div class="mb-3">\n                      <label for="title" class="form-label">Description:</label>\n                      <textarea\n                        id="task-description"\n                        class="form-control"\n                        name="description"\n                        cols="30"\n                        rows="2"\n                      >${e.description}</textarea>\n                    </div>\n                    <div class="mb-3">\n                      <label for="start" class="form-label">Due date:</label>\n                      <input\n                        id="task-date"\n                        class="form-control"\n                        type="date"\n                        name="date"\n                        min="2020-01-01"\n                        max="2025-12-31"\n                        value="${e.dueDate}"\n                      />\n                    </div>\n                    <div>\n                      <label for="priority" class="form-label">Prio</label>\n                      <select id="task-priority" class="form-select" name="priority">\n                        <option value=""></option>\n                        <option value="1">1</option>\n                        <option value="2">2</option>\n                        <option value="3">3</option>\n                      </select>\n                    </div>\n                  </div>\n                  <div class="modal-footer">\n                    <button id="remove-task" class="btn btn-outline-danger" type="button">\n                      Remove\n                    </button>\n                    <button class="btn btn-primary" type="submit">Save</button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        `}})),t.innerHTML+=r,e=new bootstrap.Modal(document.getElementById("todo-modal")),e.show()},renderAddTask:()=>{t.innerHTML+='\n      <div\n      class="modal fade"\n      id="todo-modal"\n      tabindex="-1"\n      aria-labelledby="staticBackdropLabel"\n      aria-hidden="true"\n      >\n        <div class="modal-dialog modal-dialog-centered">\n          <div class="modal-content">\n            <div class="modal-header">\n              <h5 class="modal-title" id="staticBackdropLabel">Add New Task</h5>\n              <button\n                type="button"\n                class="btn-close"\n                aria-label="Close"\n              ></button>\n            </div>\n            <form id="add-task">\n              <div class="modal-body">\n                <div class="mb-3">\n                  <label for="project" class="form-label">Project:</label>\n                  <select\n                    id="task-project"\n                    class="form-select text-capitalize"\n                    name="project"\n                  ></select>\n                </div>\n                <div class="mb-3">\n                  <label for="title" class="form-label">Title: </label>\n                  <input\n                    id="task-title"\n                    class="form-control"\n                    type="text"\n                    name="title"\n                    required\n                  />\n                </div>\n                <div class="mb-3">\n                  <label for="title" class="form-label">Description:</label>\n                  <textarea\n                    id="task-description"\n                    class="form-control"\n                    name="description"\n                    cols="30"\n                    rows="2"\n                  ></textarea>\n                </div>\n                <div class="mb-3">\n                  <label for="start" class="form-label">Due date:</label>\n                  <input\n                    id="task-date"\n                    class="form-control"\n                    type="date"\n                    name="date"\n                    min="2020-01-01"\n                    max="2025-12-31"\n                  />\n                </div>\n                <div>\n                  <label for="priority" class="form-label">Prio</label>\n                  <select id="task-priority" class="form-select" name="priority">\n                    <option value=""></option>\n                    <option value="1">1</option>\n                    <option value="2">2</option>\n                    <option value="3">3</option>\n                  </select>\n                </div>\n              </div>\n              <div class="modal-footer">\n                <button class="btn btn-primary" type="submit">Add</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    ',e=new bootstrap.Modal(document.getElementById("todo-modal")),e.show()}}})();(()=>{const t=document.getElementById("add-task"),e=document.getElementById("add-project"),n=document.getElementById("projects"),a=document.getElementById("tasks"),o=JSON.parse(localStorage.getItem("data"))||[{id:d(),title:"inbox",tasks:[]}],r=t=>{const e=document.getElementById("task-project");e.innerHTML="",B.generateSelection(o,t).forEach((t=>{e.appendChild(t)}))},i=t=>{t.preventDefault();const e=document.getElementById("task-project").value;T.create(o,e,document.getElementById("task-title").value,document.getElementById("task-description").value,document.getElementById("task-date").value,document.getElementById("task-priority").value),localStorage.setItem("data",JSON.stringify(o)),L.hide(),T.render(o,e),B.render(o)};T.render(o,"inbox"),B.render(o),document.addEventListener("submit",(t=>{"add-project"===t.target.id&&(t=>{t.preventDefault();const e=document.getElementById("project-title").value.toLowerCase();B.create(o,e),t.target.reset(),localStorage.setItem("data",JSON.stringify(o)),L.hide(),B.render(o),T.render(o,e),B.activate(e)})(t),"add-task"===t.target.id&&i(t)})),t.addEventListener("click",(()=>{L.renderAddTask(),r(),document.getElementById("task-date").value=(new Date).toISOString().substr(0,10)})),e.addEventListener("click",L.renderAddProject),n.addEventListener("click",(t=>{t.target.matches("a")&&(B.activate(t.target.dataset.project),T.render(o,t.target.dataset.project))})),a.addEventListener("click",(t=>{t.target.matches(".js-complete")&&T.complete(t,o),t.target.matches(".edit-project")&&(t=>{const e=t.target.dataset.project;L.renderEditProject(t),document.getElementById("edit-project-form").addEventListener("submit",(t=>{t.preventDefault();const n=document.getElementById("project-title-edit").value;o.forEach((t=>{t.title===e&&(t.title=n)})),localStorage.setItem("data",JSON.stringify(o)),L.hide(),T.render(o,n),B.render(o),B.activate(n)})),document.getElementById("remove-project").addEventListener("click",(()=>{o.forEach(((t,n)=>{t.title===e&&o.splice(n,1)})),localStorage.setItem("data",JSON.stringify(o)),L.hide(),document.getElementById("modals").innerHTML="",T.render(o,"inbox"),B.render(o),B.activate("inbox")}))})(t),t.target.parentNode.matches(".js-task-review")&&(t=>{L.renderEditTask(t.target.parentNode,o),r(t.target.parentNode.dataset.project);const e=document.getElementById("edit-task-form"),n=document.getElementById("task-project").value;e.addEventListener("submit",(t=>{t.preventDefault();const a=document.getElementById("task-project").value,d=document.getElementById("task-title").value,s=document.getElementById("task-description").value,l=document.getElementById("task-date").value,c=document.getElementById("task-priority").value;o.forEach((t=>{t.title===a&&t.tasks.forEach((t=>{t.id===e.dataset.task&&(t.title=d,t.description=s,t.dueDate=l,t.prio=c)}))})),n!==a&&o.forEach((o=>{o.title===n&&o.tasks.forEach(((t,n)=>{t.id===e.dataset.task&&o.tasks.splice(n,1)})),o.title===a&&i(t)})),localStorage.setItem("data",JSON.stringify(o)),L.hide(),T.render(o,a),B.render(o),r(),B.activate(a)})),document.getElementById("remove-task").addEventListener("click",(()=>{const t=document.getElementById("task-project").value;o.forEach((n=>{n.title===t&&n.tasks.forEach(((t,a)=>{t.id===e.dataset.task&&n.tasks.splice(a,1)}))})),localStorage.setItem("data",JSON.stringify(o)),L.hide(),T.render(o,t),B.render(o),B.activate(t)}))})(t)})),document.addEventListener("click",(t=>{t.target.matches(".btn-close")&&L.hide()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,